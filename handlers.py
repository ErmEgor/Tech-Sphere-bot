# handlers.py
import re
import logging
from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest

import keyboards as kb
from config import ADMIN_ID, CATALOG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∑–∞–∫–∞–∑–∞ ---
class OrderState(StatesGroup):
    getting_name = State()
    getting_phone = State()
    getting_city = State()
    getting_payment = State()
    getting_comment = State()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tech Sphere! ü™ê\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ –≥–∞–¥–∂–µ—Ç—ã –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —Ü–µ–Ω–∞–º. "
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.",
        reply_markup=kb.main_kb
    )

@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    about_text = (
        "<b>Tech Sphere ü™ê ‚Äî –≤–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–∞–¥–∂–µ—Ç–æ–≤!</b>\n\n"
        "–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à—É –∂–∏–∑–Ω—å —è—Ä—á–µ, —É–¥–æ–±–Ω–µ–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ.\n\n"
        "<b>–ù–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:</b>\n"
        "‚úÖ <b>–¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:</b> –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n"
        "üöÄ <b>–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –≤—Å–µ–º—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—É –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.\n"
        "üí¨ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "<i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –≥–∞–¥–∂–µ—Ç –≤–∞—à–µ–π –º–µ—á—Ç—ã!</i>"
    )
    await message.answer(about_text, reply_markup=kb.main_kb)

@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_kb)

@router.callback_query(F.data == "cancel_order")
async def cq_cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ–Ω–æ–π
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_kb)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ ---
@router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.get_categories_kb())

@router.callback_query(F.data.startswith("category:"))
async def show_products(callback: CallbackQuery):
    try:
        prefix, category_id = callback.data.split(":", maxsplit=1)
        if category_id not in CATALOG:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{CATALOG[category_id]['name']}¬ª:",
            reply_markup=kb.get_products_kb(category_id)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_products: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.get_categories_kb())
    await callback.answer()

# <<< –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–ö–ê–ó–ê –¢–û–í–ê–†–ê –ò –í–û–ó–í–†–ê–¢–ê –ö –ù–ï–ú–£ >>>
@router.callback_query(F.data.startswith("product:"))
async def show_product_details(callback: CallbackQuery):
    try:
        prefix, category_id, product_id = callback.data.split(":", maxsplit=2)
        
        if category_id not in CATALOG or product_id not in CATALOG[category_id]['products']:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        product = CATALOG[category_id]['products'][product_id]
        price_formatted = f"{product['price']:,}".replace(',', ' ')
        caption = (
            f"<b>{product['name']}</b>\n\n"
            f"{product['desc']}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {price_formatted} ‚Ç∏"
        )
        
        # –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —Ñ–æ—Ç–æ, –º—ã –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å—å (caption).
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç (—ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –º—ã –µ–≥–æ —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ.
        if callback.message.photo:
            await callback.message.edit_caption(
                caption=caption,
                reply_markup=kb.get_product_details_kb(category_id, product_id)
            )
        else:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=product['photo'],
                caption=caption,
                reply_markup=kb.get_product_details_kb(category_id, product_id)
            )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ show_product_details: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!", show_alert=True)

# <<< –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö >>>
@router.callback_query(F.data.startswith("specs:"))
async def show_product_specs(callback: CallbackQuery):
    try:
        prefix, category_id, product_id = callback.data.split(":", maxsplit=2)
        
        if category_id not in CATALOG or product_id not in CATALOG[category_id]['products']:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        product = CATALOG[category_id]['products'][product_id]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        caption = (
            f"<b>{product['name']} - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</b>\n\n"
            f"{product['specs']}"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ
        await callback.message.edit_caption(
            caption=caption,
            reply_markup=kb.get_specs_kb(category_id, product_id)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_product_specs: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.callback_query(F.data.startswith("back_to_products:"))
async def back_to_products(callback: CallbackQuery):
    try:
        prefix, category_id = callback.data.split(":", maxsplit=1)
        
        if category_id not in CATALOG:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        await callback.message.delete()
        await callback.message.answer(
            text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{CATALOG[category_id]['name']}¬ª:",
            reply_markup=kb.get_products_kb(category_id)
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_products: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ!", show_alert=True)

#@router.message(F.photo)
#async def log_photo(message: types.Message):
    #file_id = message.photo[-1].file_id
    #logger.info(f"File ID: {file_id}")
    #await message.answer(f"File ID: {file_id}")

# --- FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(F.data.startswith("order:"))
async def start_order(callback: CallbackQuery, state: FSMContext):
    try:
        prefix, product_id = callback.data.split(":", maxsplit=1)
        
        product_to_order = None
        for category in CATALOG.values():
            if product_id in category['products']:
                product_to_order = category['products'][product_id]
                break

        if not product_to_order:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        await state.update_data(product_name=product_to_order['name'])
        await state.set_state(OrderState.getting_name)

        await callback.message.delete()
        await callback.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=kb.cancel_order_kb
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_order: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

@router.message(StateFilter(OrderState.getting_name))
async def get_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await state.set_state(OrderState.getting_phone)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +77071234567):",
        reply_markup=kb.cancel_order_kb
    )

@router.message(StateFilter(OrderState.getting_phone))
async def get_phone(message: Message, state: FSMContext):
    if not re.match(r'^\+?\d{10,15}$', message.text):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=kb.cancel_order_kb
        )
        return
    
    await state.update_data(phone=message.text)
    await state.set_state(OrderState.getting_city)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=kb.cancel_order_kb
    )

@router.message(StateFilter(OrderState.getting_city))
async def get_city(message: Message, state: FSMContext):
    city_name = message.text.strip()
    
    if len(re.findall(r'[–∞-—è–ê-–Ø—ë–Å]', city_name)) < 3 or not re.fullmatch(r'[–∞-—è–ê-–Ø—ë–Å\s-]{3,50}', city_name):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (–º–∏–Ω. 3 –±—É–∫–≤—ã). –ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–º–∞—Ç—ã, –ù—É—Ä-–°—É–ª—Ç–∞–Ω, –ö–∞—Ä–∞–≥–∞–Ω–¥–∞.",
            reply_markup=kb.cancel_order_kb
        )
        return
    
    await state.update_data(city=city_name.capitalize())
    await state.set_state(OrderState.getting_payment)
    await message.answer(
        "–ö–∞–∫ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å?",
        reply_markup=kb.payment_options_kb
    )

@router.callback_query(StateFilter(OrderState.getting_payment), F.data.startswith("pay:"))
async def get_payment(callback: CallbackQuery, state: FSMContext):
    payment_method_map = {
        "kaspi": "Kaspi",
        "qiwi": "Qiwi",
        "cash": "–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        "skip": "–£—Ç–æ—á–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞"
    }
    prefix, payment_key = callback.data.split(':', maxsplit=1)
    payment_method = payment_method_map.get(payment_key, "–ù–µ —É–∫–∞–∑–∞–Ω")
        
    await state.update_data(payment=payment_method)
    await state.set_state(OrderState.getting_comment)
    await callback.message.edit_text(
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞–¥—Ä–µ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏—è) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':",
        reply_markup=kb.cancel_order_kb
    )
    await callback.answer()

@router.message(StateFilter(OrderState.getting_comment))
async def get_comment_and_finish(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(comment=message.text)
    
    data = await state.get_data()
    
    admin_message = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('user_name')}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{data.get('phone')}</code>\n"
        f"üè† <b>–ì–æ—Ä–æ–¥:</b> {data.get('city')}\n"
        f"üõí <b>–¢–æ–≤–∞—Ä:</b> {data.get('product_name')}\n"
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {data.get('payment')}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('comment')}\n\n"
        f"üë§ <b>Telegram:</b> @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    )
    
    try:
        await bot.send_message(ADMIN_ID, admin_message)
        await message.answer(
            "üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=kb.main_kb
        )
    except Exception as e:
        await message.answer(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
            reply_markup=kb.main_kb
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()